input {
	jdbc {
		codec => "json"
		jdbc_driver_library => "postgresql-9.4.1208.jar"
		jdbc_driver_class => "org.postgresql.Driver"
		jdbc_connection_string => "jdbc:postgresql://${POSTGRES_SERVER}:${POSTGRES_SERVER_PORT}/dataportal"
		jdbc_user => "${POSTGRES_USER}"
		jdbc_password => "${POSTGRES_PASSWORD}"
		statement_filepath => "query_occurrence.sql"
    jdbc_paging_enabled => "true"
    jdbc_page_size => "200000"
	}
}
# The filter part of this file is commented out to indicate that it is
# optional.
filter {
  if ([country_name] != "") {
    mutate {
      gsub => [
        "country_name", "\"", ""
      ]
    }
  }
  if ([county_name] != "") {
    mutate {
      gsub => [
        "county_name", "\"", ""
      ]
    }
  }
  if ([locality] != "") {
    mutate {
      gsub => [
        "locality", "\"", ""
      ]
    }
  }
  if ([department_name] != "") {
    mutate {
      gsub => [
        "department_name", "\"", ""
      ]
    }
  }
  if ([country_name] == "") {
    mutate {
      remove_field => [country_name]
    }
  }
  if ([county_name] == "") {
    mutate {
      remove_field => [county_name]
    }
  }
  if ([locality] == "") {
    mutate {
      remove_field => [locality]
    }
  }
  if ([department_name] == "") {
    mutate {
      remove_field => [department_name]
    }
  }
	if ([daystart] == "") and ([monthstart] == "") and ([yearstart] == "") {
		mutate {
			remove_field => [daystart, monthstart, yearstart]
		}
	}
	if ([dayend] == "") and ([monthend] == "") and ([yearend] == "") {
		mutate {
			remove_field => [dayend, monthend, yearend]
		}
	}
	if [daystart] and [monthstart] and [yearstart] {
		if (Integer([daystart]) > 31) and (Integer([monthstart]) == 1) {
			mutate {
				replace => {
					"daystart" => "31"
				}
			}
		}
		if (Integer([daystart]) > 28) and (Integer([monthstart]) == 2) {
			mutate {
				replace => {
					"daystart" => "28"
				}
			}
		}
		if (Integer([daystart]) > 31) and (Integer([monthstart]) == 3) {
			mutate {
				replace => {
					"daystart" => "31"
				}
			}
		}
		if (Integer([daystart]) > 30) and (Integer([monthstart]) == 4) {
			mutate {
				replace => {
					"daystart" => "30"
				}
			}
		}
		if (Integer([daystart]) > 31) and (Integer([monthstart]) == 5) {
			mutate {
				replace => {
					"daystart" => "31"
				}
			}
		}
		if (Integer([daystart]) > 30) and (Integer([monthstart]) == 6) {
			mutate {
				replace => {
					"daystart" => "30"
				}
			}
		}
		if (Integer([daystart]) > 31) and (Integer([monthstart]) == 7) {
			mutate {
				replace => {
					"daystart" => "31"
				}
			}
		}
		if (Integer([daystart]) > 31) and (Integer([monthstart]) == 8) {
			mutate {
				replace => {
					"daystart" => "31"
				}
			}
		}
		if (Integer([daystart]) > 30) and (Integer([monthstart]) == 9) {
			mutate {
				replace => {
					"daystart" => "30"
				}
			}
		}
		if (Integer([daystart]) > 31) and (Integer([monthstart]) == 10) {
			mutate {
				replace => {
					"daystart" => "31"
				}
			}
		}
		if (Integer([daystart]) > 30) and (Integer([monthstart]) == 11) {
			mutate {
				replace => {
					"daystart" => "30"
				}
			}
		}
		if (Integer([daystart]) > 31) and (Integer([monthstart]) == 12) {
			mutate {
				replace => {
					"daystart" => "31"
				}
			}
		}
		mutate {
			add_field => {
				"eventdate_start" => "%{[yearstart]}-%{[monthstart]}-%{[daystart]}"
				"day_start" => "%{[daystart]}"
				"month_start" => "%{[monthstart]}"
				"year_start" => "%{[yearstart]}"
			}
		}
	} else if [monthstart] and [yearstart] {
		mutate {
			add_field => {
				"eventdate_start" => "%{[yearstart]}-%{[monthstart]}-1"
				"day_start" => "1"
				"month_start" => "%{[monthstart]}"
				"year_start" => "%{[yearstart]}"
			}
		}
	} else if [yearstart] {
		mutate {
			add_field => {
				"eventdate_start" => "%{[yearstart]}-1-1"
				"day_start" => "1"
				"month_start" => "1"
				"year_start" => "%{[yearstart]}"
			}
		}
	}
	if [dayend] and [monthend] and [yearend] {
		if (Integer([dayend]) > 31) and (Integer([monthend]) == 1) {
			mutate {
				replace => {
					"dayend" => "31"
				}
			}
		}
		if (Integer([dayend]) > 28) and (Integer([monthend]) == 2) {
			mutate {
				replace => {
					"dayend" => "28"
				}
			}
		}
		if (Integer([dayend]) > 31) and (Integer([monthend]) == 3) {
			mutate {
				replace => {
					"dayend" => "31"
				}
			}
		}
		if (Integer([dayend]) > 30) and (Integer([monthend]) == 4) {
			mutate {
				replace => {
					"dayend" => "30"
				}
			}
		}
		if (Integer([dayend]) > 31) and (Integer([monthend]) == 5) {
			mutate {
				replace => {
					"dayend" => "31"
				}
			}
		}
		if (Integer([dayend]) > 30) and (Integer([monthend]) == 6) {
			mutate {
				replace => {
					"dayend" => "30"
				}
			}
		}
		if (Integer([dayend]) > 31) and (Integer([monthend]) == 7) {
			mutate {
				replace => {
					"dayend" => "31"
				}
			}
		}
		if (Integer([dayend]) > 31) and (Integer([monthend]) == 8) {
			mutate {
				replace => {
					"dayend" => "31"
				}
			}
		}
		if (Integer([dayend]) > 30) and (Integer([monthend]) == 9) {
			mutate {
				replace => {
					"dayend" => "30"
				}
			}
		}
		if (Integer([dayend]) > 31) and (Integer([monthend]) == 10) {
			mutate {
				replace => {
					"dayend" => "31"
				}
			}
		}
		if (Integer([dayend]) > 30) and (Integer([monthend]) == 11) {
			mutate {
				replace => {
					"dayend" => "30"
				}
			}
		}
		if (Integer([dayend]) > 31) and (Integer([monthend]) == 12) {
			mutate {
				replace => {
					"dayend" => "31"
				}
			}
		}
		mutate {
			add_field => {
				"eventdate_end" => "%{[yearend]}-%{[monthend]}-%{[dayend]}"
				"day_end" => "%{[dayend]}"
				"month_end" => "%{[monthend]}"
				"year_end" => "%{[yearend]}"
			}
		}
	} else if [monthend] and [yearend] {
		mutate {
			add_field => {
				"eventdate_end" => "%{[yearend]}-%{[monthend]}-1"
				"day_end" => "1"
				"month_end" => "%{[monthend]}"
				"year_end" => "%{[yearend]}"
			}
		}
	} else if [yearend] {
		mutate {
			add_field => {
				"eventdate_end" => "%{[yearend]}-1-1"
				"day_end" => "1"
				"month_end" => "1"
				"year_end" => "%{[yearend]}"
			}
		}
	}
	if ([latitude] and [longitude]) {
		mutate {
			add_field => {
				"[location][lat]" => "%{[latitude]}"
				"[location][lon]" => "%{[longitude]}"
			}
		}
	}
	if [kingdom] {
		mutate {
			add_field => {
				"[taxonomy][kingdom_name]" => "%{[kingdom]}"
			}
		}
	}
	if [phylum] {
		mutate {
			add_field => {
				"[taxonomy][phylum_name]" => "%{[phylum]}"
			}
		}
	}
	if [class] {
		mutate {
			add_field => {
				"[taxonomy][class_name]" => "%{[class]}"
			}
		}
	}
	if [order] {
		mutate {
			add_field => {
				"[taxonomy][order_name]" => "%{[order]}"
			}
		}
	}
	if [family] {
		mutate {
			add_field => {
				"[taxonomy][family_name]" => "%{[family]}"
			}
		}
	}
	if [genus] {
		mutate {
			add_field => {
				"[taxonomy][genus_name]" => "%{[genus]}"
			}
		}
	}
	if [species] {
		mutate {
			add_field => {
				"[taxonomy][species_name]" => "%{[species]}"
			}
		}
	}
	if [specific_epithet] {
		mutate {
			add_field => {
				"[taxonomy][specific_epithet]" => "%{[specific_epithet]}"
			}
		}
	}
	if [infraspecific_epithet] {
		mutate {
			add_field => {
				"[taxonomy][infraspecific_epithet]" => "%{[infraspecific_epithet]}"
			}
		}
	}
	if [provider_id] {
		mutate {
			add_field => {
				"[provider][id]" => "%{[provider_id]}"
			}
		}
	}
	if [provider_name] {
		mutate {
			add_field => {
				"[provider][name]" => "%{[provider_name]}"
			}
		}
	}
	if [provider_description] {
		mutate {
			add_field => {
				"[provider][description]" => "%{[provider_description]}"
			}
		}
	}
	if [provider_address] {
		mutate {
			add_field => {
				"[provider][address]" => "%{[provider_address]}"
			}
		}
	}
	if [provider_city] {
		mutate {
			add_field => {
				"[provider][city]" => "%{[provider_city]}"
			}
		}
	}
	if [provider_website_url] {
		mutate {
			add_field => {
				"[provider][website_url]" => "%{[provider_website_url]}"
			}
		}
	}
	if [provider_email] {
		mutate {
			add_field => {
				"[provider][email]" => "%{provider_email}"
			}
		}
	}
	if [provider_logo_url] {
		mutate {
			add_field => {
				"[provider][logo_url]" => "%{[provider_logo_url]}"
			}
		}
	}
	if [provider_phone] {
		mutate {
			add_field => {
				"[provider][phone]" => "%{[provider_phone]}"
			}
		}
	}
	if [resource_id] {
		mutate {
			add_field => {
				"[resource][id]" => "%{[resource_id]}"
			}
		}
	}
	if [resource_name] {
		mutate {
			add_field => {
				"[resource][name]" => "%{[resource_name]}"
			}
		}
	}
	if [resource_title] {
		mutate {
			add_field => {
				"[resource][title]" => "%{[resource_title]}"
			}
		}
	}
	if [resource_description] {
		mutate {
			add_field => {
				"[resource][description]" => "%{[resource_description]}"
			}
		}
	}
	if [resource_intellectual_rights] {
		mutate {
			add_field => {
				"[resource][intellectual_rights]" => "%{[resource_intellectual_rights]}"
			}
		}
	}
	if [resource_citation] {
		mutate {
			add_field => {
				"[resource][citation]" => "%{[resource_citation]}"
			}
		}
	}
	if [resource_logo_url] {
		mutate {
			add_field => {
				"[resource][logo_url]" => "%{[resource_logo_url]}"
			}
		}
	}
	if [resource_publication_date] {
		mutate {
			add_field => {
				"[resource][publication_date]" => "%{[resource_publication_date]}"
			}
		}
	}
	if [resource_gbif_package_id] {
		mutate {
			add_field => {
				"[resource][gbif_package_id]" => "%{[resource_gbif_package_id]}"
			}
		}
	}
	if [resource_alternate_identifier] {
		mutate {
			add_field => {
				"[resource][alternate_identifier]" => "%{[resource_alternate_identifier]}"
			}
		}
	}
	if [resource_language] {
		mutate {
			add_field => {
				"[resource][language]" => "%{[resource_language]}"
			}
		}
	}
	if [resource_keyword] {
		mutate {
			add_field => {
				"[resource][keyword]" => "%{[resource_keyword]}"
			}
		}
	}
  if [resource_keyword_thesaurus] {
    mutate {
      add_field => {
        "[resource][keyword_thesaurus]" => "%{[resource_keyword_thesaurus]}"
      }
    }
  }
	if [resource_hierarchy_level] {
		mutate {
			add_field => {
				"[resource][hierarchy_level]" => "%{[resource_hierarchy_level]}"
			}
		}
	}
	if [collection_identifier] {
		mutate {
			add_field => {
				"[collection][id]" => "%{[collection_identifier]}"
			}
		}
	}
	if [collection_name] {
		mutate {
			add_field => {
				"[collection][name]" => "%{[collection_name]}"
			}
		}
	}
	if [collection_code] {
		mutate {
			add_field => {
				"[collection][code]" => "%{[collection_code]}"
			}
		}
	}
	if [institution_code] {
		mutate {
			add_field => {
				"[institution][code]" => "%{[institution_code]}"
			}
		}
	}
	if [catalog_number] {
		mutate {
			add_field => {
				"[catalog][number]" => "%{[catalog_number]}"
			}
		}
	}
	if [basis_of_record_name] {
		mutate {
			add_field => {
				"[basis_of_record][name]" => "%{[basis_of_record_name]}"
			}
		}
	}
	if ![verbatim_elevation] {
		mutate {
			remove_field => [verbatim_elevation]
		}
	}
	if ![maximum_elevation] {
		mutate {
			remove_field => [maximum_elevation]
		}
	}
	if ![minimum_elevation] {
		mutate {
			remove_field => [minimum_elevation]
		}
	}
	if ![habitat] {
		mutate {
			remove_field => [habitat]
		}
	}
	if ![taxon_rank] {
		mutate {
			remove_field => [taxon_rank]
		}
	}
	mutate {
		remove_field => [latitude, longitude, kingdom, phylum, class, order, family, genus, species, specific_epithet, infraspecific_epithet, provider_id, provider_name, provider_description, provider_address, provider_city, provider_website_url, provider_logo_url, provider_email, provider_phone, resource_id, resource_name, resource_title, resource_description, resource_intellectual_rights, resource_citation, resource_logo_url, resource_publication_date, resource_gbif_package_id, resource_alternate_identifier, resource_language, resource_keyword, resource_keyword_thesaurus, resource_hierarchy_level, collection_identifier, collection_name, collection_code, institution_code, catalog_number, basis_of_record_name, daystart, monthstart, yearstart, dayend, monthend, yearend]
	}
}
output {
#	stdout { codec => rubydebug }
	elasticsearch {
		index => "sibdataportal"
		document_type => "occurrence"
		document_id => "%{id}"
		hosts => ["${ESDBHOST}"]
	}
}
